package com.example.accessingdatamysql;

import java.util.LinkedList;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.feed.info.info;
import com.feed.info.parseData;

@Controller // This means that this class is a Controller
@RequestMapping(path="/feed") // This means URL's start with /demo (after Application path)
public class MainController {
  @Autowired // This means to get the bean called FeedRepository
         // Which is auto-generated by Spring, we will use it to handle the data
  private FeedRepository FeedRepository;

  
  @PostMapping(path="/url") 
  public @ResponseBody String urlInfo (@RequestParam String url) {
     parseData parseData = new parseData(url); 
     info info = parseData.obtainData();
     System.out.println(" Longitud "+info.getTitle().size());
     
     for (int i = 0; i < info.getTitle().size(); i++)
     {

         Feed n = new Feed();
         n.setTitle(info.getTitle().get(i));
         n.setDescription(info.getDescription().get(i));
         n.setPublication(info.getUrlLink().get(i));
         n.setImg(info.getUrlImage().get(i));
          FeedRepository.save(n);
    	 
     }
    return "Saved";
  }
  
  
  @PostMapping(path="/cron") 
  public @ResponseBody String urlCron (@RequestParam String url) {

	  
	  
	  /*parseData parseData = new parseData(url); 
     info info = parseData.obtainData();
     System.out.println(" Longitud "+info.getTitle().size());
     
     for (int i = 0; i < info.getTitle().size(); i++)
     {

         Feed n = new Feed();
         n.setTitle(info.getTitle().get(i));
         n.setDescription(info.getDescription().get(i));
         n.setPublication(info.getUrlLink().get(i));
         n.setImg(info.getUrlImage().get(i));
          FeedRepository.save(n);    	 
     }*/
    return "Cron";
  }
  
  
  

  @GetMapping(path="/all")
  public @ResponseBody Iterable<Feed> getAllFeeds() {
    // This returns a JSON or XML with the Feeds
    return FeedRepository.findAll();
  }
}